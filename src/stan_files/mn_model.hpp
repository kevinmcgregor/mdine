/*
    mdine is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    mdine is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with mdine.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0

#include <stan/model/model_header.hpp>

namespace model_mn_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_mn_model");
    reader.add_event(133, 131, "end", "model_mn_model");
    return reader;
}

template <typename T0__>
typename boost::math::tools::promote_args<T0__>::type
frobenius_lower(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& y, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 4;
        int mat_dim(0);
        (void) mat_dim;  // dummy to suppress unused var warning
        stan::math::fill(mat_dim, std::numeric_limits<int>::min());

        current_statement_begin__ = 5;
        local_scalar_t__ f(DUMMY_VAR__);
        (void) f;  // dummy to suppress unused var warning
        stan::math::initialize(f, DUMMY_VAR__);
        stan::math::fill(f, DUMMY_VAR__);


        current_statement_begin__ = 6;
        stan::math::assign(f, 0);
        current_statement_begin__ = 7;
        stan::math::assign(mat_dim, rows(y));
        current_statement_begin__ = 8;
        for (int i = 1; i <= mat_dim; ++i) {

            current_statement_begin__ = 9;
            for (int j = 1; j <= (i - 1); ++j) {

                current_statement_begin__ = 10;
                stan::math::assign(f, (f + stan::math::fabs(get_base1(y, i, j, "y", 1))));
            }
        }
        current_statement_begin__ = 13;
        return stan::math::promote_scalar<fun_return_scalar_t__>(f);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct frobenius_lower_functor__ {
    template <typename T0__>
        typename boost::math::tools::promote_args<T0__>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& y, std::ostream* pstream__) const {
        return frobenius_lower(y, pstream__);
    }
};

template <typename T0__>
typename boost::math::tools::promote_args<T0__>::type
nat_con(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& y, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 16;
        return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::log(mean(stan::math::exp(eigenvalues_sym(stan::math::fabs(y))))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct nat_con_functor__ {
    template <typename T0__>
        typename boost::math::tools::promote_args<T0__>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& y, std::ostream* pstream__) const {
        return nat_con(y, pstream__);
    }
};

class model_mn_model
  : public stan::model::model_base_crtp<model_mn_model> {
private:
        int n;
        int k;
        int p;
        std::vector<std::vector<int> > counts;
        double lam_mle;
        vector_d status;
        vector_d offset;
        matrix_d covars;
        double n_real;
        matrix_d Q_ast;
        matrix_d R_ast;
        matrix_d R_ast_inverse;
        double inv_lam_mle;
public:
    model_mn_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_mn_model(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_mn_model_namespace::model_mn_model";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            // initialize data block variables from context__
            current_statement_begin__ = 20;
            context__.validate_dims("data initialization", "n", "int", context__.to_vec());
            n = int(0);
            vals_i__ = context__.vals_i("n");
            pos__ = 0;
            n = vals_i__[pos__++];
            check_greater_or_equal(function__, "n", n, 0);

            current_statement_begin__ = 21;
            context__.validate_dims("data initialization", "k", "int", context__.to_vec());
            k = int(0);
            vals_i__ = context__.vals_i("k");
            pos__ = 0;
            k = vals_i__[pos__++];
            check_greater_or_equal(function__, "k", k, 0);

            current_statement_begin__ = 22;
            context__.validate_dims("data initialization", "p", "int", context__.to_vec());
            p = int(0);
            vals_i__ = context__.vals_i("p");
            pos__ = 0;
            p = vals_i__[pos__++];
            check_greater_or_equal(function__, "p", p, 0);

            current_statement_begin__ = 23;
            validate_non_negative_index("counts", "n", n);
            validate_non_negative_index("counts", "k", k);
            context__.validate_dims("data initialization", "counts", "int", context__.to_vec(n,k));
            counts = std::vector<std::vector<int> >(n, std::vector<int>(k, int(0)));
            vals_i__ = context__.vals_i("counts");
            pos__ = 0;
            size_t counts_k_0_max__ = n;
            size_t counts_k_1_max__ = k;
            for (size_t k_1__ = 0; k_1__ < counts_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < counts_k_0_max__; ++k_0__) {
                    counts[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t counts_i_0_max__ = n;
            size_t counts_i_1_max__ = k;
            for (size_t i_0__ = 0; i_0__ < counts_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < counts_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "counts[i_0__][i_1__]", counts[i_0__][i_1__], 0);
                }
            }

            current_statement_begin__ = 24;
            context__.validate_dims("data initialization", "lam_mle", "double", context__.to_vec());
            lam_mle = double(0);
            vals_r__ = context__.vals_r("lam_mle");
            pos__ = 0;
            lam_mle = vals_r__[pos__++];
            check_greater_or_equal(function__, "lam_mle", lam_mle, 0);

            current_statement_begin__ = 25;
            validate_non_negative_index("status", "n", n);
            context__.validate_dims("data initialization", "status", "vector_d", context__.to_vec(n));
            status = Eigen::Matrix<double, Eigen::Dynamic, 1>(n);
            vals_r__ = context__.vals_r("status");
            pos__ = 0;
            size_t status_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < status_j_1_max__; ++j_1__) {
                status(j_1__) = vals_r__[pos__++];
            }

            current_statement_begin__ = 26;
            validate_non_negative_index("offset", "n", n);
            context__.validate_dims("data initialization", "offset", "vector_d", context__.to_vec(n));
            offset = Eigen::Matrix<double, Eigen::Dynamic, 1>(n);
            vals_r__ = context__.vals_r("offset");
            pos__ = 0;
            size_t offset_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < offset_j_1_max__; ++j_1__) {
                offset(j_1__) = vals_r__[pos__++];
            }

            current_statement_begin__ = 27;
            validate_non_negative_index("covars", "n", n);
            validate_non_negative_index("covars", "p", p);
            context__.validate_dims("data initialization", "covars", "matrix_d", context__.to_vec(n,p));
            covars = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n, p);
            vals_r__ = context__.vals_r("covars");
            pos__ = 0;
            size_t covars_j_2_max__ = p;
            size_t covars_j_1_max__ = n;
            for (size_t j_2__ = 0; j_2__ < covars_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < covars_j_1_max__; ++j_1__) {
                    covars(j_1__, j_2__) = vals_r__[pos__++];
                }
            }


            // initialize transformed data variables
            current_statement_begin__ = 30;
            n_real = double(0);
            stan::math::fill(n_real, DUMMY_VAR__);

            current_statement_begin__ = 31;
            validate_non_negative_index("Q_ast", "n", n);
            validate_non_negative_index("Q_ast", "p", p);
            Q_ast = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n, p);
            stan::math::fill(Q_ast, DUMMY_VAR__);

            current_statement_begin__ = 32;
            validate_non_negative_index("R_ast", "p", p);
            validate_non_negative_index("R_ast", "p", p);
            R_ast = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(p, p);
            stan::math::fill(R_ast, DUMMY_VAR__);

            current_statement_begin__ = 33;
            validate_non_negative_index("R_ast_inverse", "p", p);
            validate_non_negative_index("R_ast_inverse", "p", p);
            R_ast_inverse = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(p, p);
            stan::math::fill(R_ast_inverse, DUMMY_VAR__);

            current_statement_begin__ = 34;
            inv_lam_mle = double(0);
            stan::math::fill(inv_lam_mle, DUMMY_VAR__);

            // execute transformed data statements
            current_statement_begin__ = 35;
            stan::math::assign(n_real, n);
            current_statement_begin__ = 36;
            stan::math::assign(Q_ast, multiply(stan::model::rvalue(qr_Q(covars), stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_min_max(1, p), stan::model::nil_index_list())), "qr_Q(covars)"), stan::math::sqrt((n_real - 1))));
            current_statement_begin__ = 37;
            stan::math::assign(R_ast, divide(stan::model::rvalue(qr_R(covars), stan::model::cons_list(stan::model::index_min_max(1, p), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "qr_R(covars)"), stan::math::sqrt((n_real - 1))));
            current_statement_begin__ = 38;
            stan::math::assign(R_ast_inverse, inverse(R_ast));
            current_statement_begin__ = 39;
            stan::math::assign(inv_lam_mle, (1 / lam_mle));

            // validate transformed data
            current_statement_begin__ = 30;
            check_greater_or_equal(function__, "n_real", n_real, 0);

            current_statement_begin__ = 34;
            check_greater_or_equal(function__, "inv_lam_mle", inv_lam_mle, 0);


            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 42;
            num_params_r__ += 1;
            current_statement_begin__ = 43;
            validate_non_negative_index("theta", "p", p);
            validate_non_negative_index("theta", "(k - 1)", (k - 1));
            num_params_r__ += (p * (k - 1));
            current_statement_begin__ = 44;
            validate_non_negative_index("lin_pred_rand", "(k - 1)", (k - 1));
            validate_non_negative_index("lin_pred_rand", "n", n);
            num_params_r__ += ((k - 1) * n);
            current_statement_begin__ = 45;
            validate_non_negative_index("L0", "(k - 1)", (k - 1));
            validate_non_negative_index("L0", "(k - 1)", (k - 1));
            num_params_r__ += ((((k - 1) * ((k - 1) + 1)) / 2) + (((k - 1) - (k - 1)) * (k - 1)));
            current_statement_begin__ = 46;
            validate_non_negative_index("L1", "(k - 1)", (k - 1));
            validate_non_negative_index("L1", "(k - 1)", (k - 1));
            num_params_r__ += ((((k - 1) * ((k - 1) + 1)) / 2) + (((k - 1) - (k - 1)) * (k - 1)));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_mn_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        current_statement_begin__ = 42;
        if (!(context__.contains_r("lambda")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lambda missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lambda");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "lambda", "double", context__.to_vec());
        double lambda(0);
        lambda = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, lambda);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lambda: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 43;
        if (!(context__.contains_r("theta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable theta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("theta");
        pos__ = 0U;
        validate_non_negative_index("theta", "p", p);
        validate_non_negative_index("theta", "(k - 1)", (k - 1));
        context__.validate_dims("parameter initialization", "theta", "matrix_d", context__.to_vec(p,(k - 1)));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> theta(p, (k - 1));
        size_t theta_j_2_max__ = (k - 1);
        size_t theta_j_1_max__ = p;
        for (size_t j_2__ = 0; j_2__ < theta_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                theta(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(theta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable theta: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 44;
        if (!(context__.contains_r("lin_pred_rand")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lin_pred_rand missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lin_pred_rand");
        pos__ = 0U;
        validate_non_negative_index("lin_pred_rand", "(k - 1)", (k - 1));
        validate_non_negative_index("lin_pred_rand", "n", n);
        context__.validate_dims("parameter initialization", "lin_pred_rand", "vector_d", context__.to_vec(n,(k - 1)));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > lin_pred_rand(n, Eigen::Matrix<double, Eigen::Dynamic, 1>((k - 1)));
        size_t lin_pred_rand_j_1_max__ = (k - 1);
        size_t lin_pred_rand_k_0_max__ = n;
        for (size_t j_1__ = 0; j_1__ < lin_pred_rand_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < lin_pred_rand_k_0_max__; ++k_0__) {
                lin_pred_rand[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t lin_pred_rand_i_0_max__ = n;
        for (size_t i_0__ = 0; i_0__ < lin_pred_rand_i_0_max__; ++i_0__) {
            try {
                writer__.vector_unconstrain(lin_pred_rand[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lin_pred_rand: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 45;
        if (!(context__.contains_r("L0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable L0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("L0");
        pos__ = 0U;
        validate_non_negative_index("L0", "(k - 1)", (k - 1));
        validate_non_negative_index("L0", "(k - 1)", (k - 1));
        context__.validate_dims("parameter initialization", "L0", "matrix_d", context__.to_vec((k - 1),(k - 1)));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> L0((k - 1), (k - 1));
        size_t L0_j_2_max__ = (k - 1);
        size_t L0_j_1_max__ = (k - 1);
        for (size_t j_2__ = 0; j_2__ < L0_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L0_j_1_max__; ++j_1__) {
                L0(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.cholesky_factor_cov_unconstrain(L0);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable L0: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 46;
        if (!(context__.contains_r("L1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable L1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("L1");
        pos__ = 0U;
        validate_non_negative_index("L1", "(k - 1)", (k - 1));
        validate_non_negative_index("L1", "(k - 1)", (k - 1));
        context__.validate_dims("parameter initialization", "L1", "matrix_d", context__.to_vec((k - 1),(k - 1)));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> L1((k - 1), (k - 1));
        size_t L1_j_2_max__ = (k - 1);
        size_t L1_j_1_max__ = (k - 1);
        for (size_t j_2__ = 0; j_2__ < L1_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L1_j_1_max__; ++j_1__) {
                L1(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.cholesky_factor_cov_unconstrain(L1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable L1: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);

            // model parameters
            current_statement_begin__ = 42;
            local_scalar_t__ lambda;
            (void) lambda;  // dummy to suppress unused var warning
            if (jacobian__)
                lambda = in__.scalar_lb_constrain(0, lp__);
            else
                lambda = in__.scalar_lb_constrain(0);

            current_statement_begin__ = 43;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> theta;
            (void) theta;  // dummy to suppress unused var warning
            if (jacobian__)
                theta = in__.matrix_constrain(p, (k - 1), lp__);
            else
                theta = in__.matrix_constrain(p, (k - 1));

            current_statement_begin__ = 44;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > lin_pred_rand;
            size_t lin_pred_rand_d_0_max__ = n;
            lin_pred_rand.reserve(lin_pred_rand_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < lin_pred_rand_d_0_max__; ++d_0__) {
                if (jacobian__)
                    lin_pred_rand.push_back(in__.vector_constrain((k - 1), lp__));
                else
                    lin_pred_rand.push_back(in__.vector_constrain((k - 1)));
            }

            current_statement_begin__ = 45;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> L0;
            (void) L0;  // dummy to suppress unused var warning
            if (jacobian__)
                L0 = in__.cholesky_factor_cov_constrain((k - 1), (k - 1), lp__);
            else
                L0 = in__.cholesky_factor_cov_constrain((k - 1), (k - 1));

            current_statement_begin__ = 46;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> L1;
            (void) L1;  // dummy to suppress unused var warning
            if (jacobian__)
                L1 = in__.cholesky_factor_cov_constrain((k - 1), (k - 1), lp__);
            else
                L1 = in__.cholesky_factor_cov_constrain((k - 1), (k - 1));

            // transformed parameters
            current_statement_begin__ = 53;
            validate_non_negative_index("invsigma0", "(k - 1)", (k - 1));
            validate_non_negative_index("invsigma0", "(k - 1)", (k - 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> invsigma0((k - 1), (k - 1));
            stan::math::initialize(invsigma0, DUMMY_VAR__);
            stan::math::fill(invsigma0, DUMMY_VAR__);

            current_statement_begin__ = 54;
            validate_non_negative_index("invsigma1", "(k - 1)", (k - 1));
            validate_non_negative_index("invsigma1", "(k - 1)", (k - 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> invsigma1((k - 1), (k - 1));
            stan::math::initialize(invsigma1, DUMMY_VAR__);
            stan::math::fill(invsigma1, DUMMY_VAR__);

            current_statement_begin__ = 55;
            validate_non_negative_index("probs", "k", k);
            validate_non_negative_index("probs", "n", n);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > probs(n, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(k));
            stan::math::initialize(probs, DUMMY_VAR__);
            stan::math::fill(probs, DUMMY_VAR__);

            current_statement_begin__ = 56;
            local_scalar_t__ invlambda;
            (void) invlambda;  // dummy to suppress unused var warning
            stan::math::initialize(invlambda, DUMMY_VAR__);
            stan::math::fill(invlambda, DUMMY_VAR__);

            current_statement_begin__ = 57;
            local_scalar_t__ lambda_half;
            (void) lambda_half;  // dummy to suppress unused var warning
            stan::math::initialize(lambda_half, DUMMY_VAR__);
            stan::math::fill(lambda_half, DUMMY_VAR__);

            current_statement_begin__ = 58;
            validate_non_negative_index("lin_pred", "(k - 1)", (k - 1));
            validate_non_negative_index("lin_pred", "n", n);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > lin_pred(n, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>((k - 1)));
            stan::math::initialize(lin_pred, DUMMY_VAR__);
            stan::math::fill(lin_pred, DUMMY_VAR__);

            // transformed parameters block statements
            current_statement_begin__ = 61;
            for (int i = 1; i <= n; ++i) {

                current_statement_begin__ = 62;
                stan::model::assign(lin_pred, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            transpose(add(multiply(get_base1(covars, i, "covars", 1), theta), get_base1(offset, i, "offset", 1))), 
                            "assigning variable lin_pred");
                current_statement_begin__ = 63;
                stan::model::assign(probs, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            softmax(append_row(get_base1(lin_pred_rand, i, "lin_pred_rand", 1), 0)), 
                            "assigning variable probs");
            }
            current_statement_begin__ = 75;
            stan::math::assign(invsigma0, multiply_lower_tri_self_transpose(L0));
            current_statement_begin__ = 76;
            stan::math::assign(invsigma1, multiply_lower_tri_self_transpose(L1));
            current_statement_begin__ = 78;
            stan::math::assign(invlambda, (1 / lambda));
            current_statement_begin__ = 79;
            stan::math::assign(lambda_half, (lambda / 2));

            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            current_statement_begin__ = 53;
            size_t invsigma0_j_1_max__ = (k - 1);
            size_t invsigma0_j_2_max__ = (k - 1);
            for (size_t j_1__ = 0; j_1__ < invsigma0_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < invsigma0_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(invsigma0(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: invsigma0" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable invsigma0: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            stan::math::check_cov_matrix(function__, "invsigma0", invsigma0);

            current_statement_begin__ = 54;
            size_t invsigma1_j_1_max__ = (k - 1);
            size_t invsigma1_j_2_max__ = (k - 1);
            for (size_t j_1__ = 0; j_1__ < invsigma1_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < invsigma1_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(invsigma1(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: invsigma1" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable invsigma1: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            stan::math::check_cov_matrix(function__, "invsigma1", invsigma1);

            current_statement_begin__ = 55;
            size_t probs_k_0_max__ = n;
            size_t probs_j_1_max__ = k;
            for (size_t k_0__ = 0; k_0__ < probs_k_0_max__; ++k_0__) {
                for (size_t j_1__ = 0; j_1__ < probs_j_1_max__; ++j_1__) {
                    if (stan::math::is_uninitialized(probs[k_0__](j_1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: probs" << "[" << k_0__ << "]" << "(" << j_1__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable probs: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            size_t probs_i_0_max__ = n;
            for (size_t i_0__ = 0; i_0__ < probs_i_0_max__; ++i_0__) {
                stan::math::check_simplex(function__, "probs[i_0__]", probs[i_0__]);
            }

            current_statement_begin__ = 56;
            if (stan::math::is_uninitialized(invlambda)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: invlambda";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable invlambda: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            check_greater_or_equal(function__, "invlambda", invlambda, 0);

            current_statement_begin__ = 57;
            if (stan::math::is_uninitialized(lambda_half)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: lambda_half";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable lambda_half: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            check_greater_or_equal(function__, "lambda_half", lambda_half, 0);

            current_statement_begin__ = 58;
            size_t lin_pred_k_0_max__ = n;
            size_t lin_pred_j_1_max__ = (k - 1);
            for (size_t k_0__ = 0; k_0__ < lin_pred_k_0_max__; ++k_0__) {
                for (size_t j_1__ = 0; j_1__ < lin_pred_j_1_max__; ++j_1__) {
                    if (stan::math::is_uninitialized(lin_pred[k_0__](j_1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: lin_pred" << "[" << k_0__ << "]" << "(" << j_1__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable lin_pred: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }

            // model body

            current_statement_begin__ = 83;
            for (int i = 1; i <= n; ++i) {

                current_statement_begin__ = 84;
                lp_accum__.add(multinomial_log<propto__>(get_base1(counts, i, "counts", 1), get_base1(probs, i, "probs", 1)));
            }
            current_statement_begin__ = 88;
            for (int i = 1; i <= n; ++i) {

                current_statement_begin__ = 89;
                if (as_bool(logical_eq(get_base1(status, i, "status", 1), 0))) {

                    current_statement_begin__ = 91;
                    lp_accum__.add(multi_normal_prec_log<propto__>(get_base1(lin_pred_rand, i, "lin_pred_rand", 1), get_base1(lin_pred, i, "lin_pred", 1), invsigma0));
                } else {

                    current_statement_begin__ = 94;
                    lp_accum__.add(multi_normal_prec_log<propto__>(get_base1(lin_pred_rand, i, "lin_pred_rand", 1), get_base1(lin_pred, i, "lin_pred", 1), invsigma1));
                }
            }
            current_statement_begin__ = 99;
            for (int j1 = 1; j1 <= (k - 1); ++j1) {

                current_statement_begin__ = 101;
                for (int j2 = 1; j2 <= j1; ++j2) {

                    current_statement_begin__ = 102;
                    if (as_bool(logical_eq(j1, j2))) {

                        current_statement_begin__ = 103;
                        lp_accum__.add(exponential_log<propto__>(get_base1(invsigma0, j1, j2, "invsigma0", 1), lambda_half));
                        current_statement_begin__ = 104;
                        lp_accum__.add(exponential_log<propto__>(get_base1(invsigma1, j1, j2, "invsigma1", 1), lambda_half));
                    } else {

                        current_statement_begin__ = 106;
                        lp_accum__.add(double_exponential_log<propto__>(get_base1(invsigma0, j1, j2, "invsigma0", 1), 0, invlambda));
                        current_statement_begin__ = 107;
                        lp_accum__.add(double_exponential_log<propto__>(get_base1(invsigma1, j1, j2, "invsigma1", 1), 0, invlambda));
                    }
                }
            }
            current_statement_begin__ = 112;
            for (int j1 = 1; j1 <= p; ++j1) {

                current_statement_begin__ = 113;
                for (int j2 = 1; j2 <= (k - 1); ++j2) {

                    current_statement_begin__ = 114;
                    lp_accum__.add(normal_log<propto__>(get_base1(theta, j1, j2, "theta", 1), 0, 10000));
                }
            }
            current_statement_begin__ = 119;
            lp_accum__.add(exponential_log<propto__>(lambda, inv_lam_mle));

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("lambda");
        names__.push_back("theta");
        names__.push_back("lin_pred_rand");
        names__.push_back("L0");
        names__.push_back("L1");
        names__.push_back("invsigma0");
        names__.push_back("invsigma1");
        names__.push_back("probs");
        names__.push_back("invlambda");
        names__.push_back("lambda_half");
        names__.push_back("lin_pred");
        names__.push_back("beta");
        names__.push_back("invsigma_diff");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(p);
        dims__.push_back((k - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dims__.push_back((k - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((k - 1));
        dims__.push_back((k - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((k - 1));
        dims__.push_back((k - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((k - 1));
        dims__.push_back((k - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((k - 1));
        dims__.push_back((k - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dims__.push_back(k);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dims__.push_back((k - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(p);
        dims__.push_back((k - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((k - 1));
        dims__.push_back((k - 1));
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_mn_model_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning

        // read-transform, write parameters
        double lambda = in__.scalar_lb_constrain(0);
        vars__.push_back(lambda);

        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> theta = in__.matrix_constrain(p, (k - 1));
        size_t theta_j_2_max__ = (k - 1);
        size_t theta_j_1_max__ = p;
        for (size_t j_2__ = 0; j_2__ < theta_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                vars__.push_back(theta(j_1__, j_2__));
            }
        }

        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > lin_pred_rand;
        size_t lin_pred_rand_d_0_max__ = n;
        lin_pred_rand.reserve(lin_pred_rand_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < lin_pred_rand_d_0_max__; ++d_0__) {
            lin_pred_rand.push_back(in__.vector_constrain((k - 1)));
        }
        size_t lin_pred_rand_j_1_max__ = (k - 1);
        size_t lin_pred_rand_k_0_max__ = n;
        for (size_t j_1__ = 0; j_1__ < lin_pred_rand_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < lin_pred_rand_k_0_max__; ++k_0__) {
                vars__.push_back(lin_pred_rand[k_0__](j_1__));
            }
        }

        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> L0 = in__.cholesky_factor_cov_constrain((k - 1), (k - 1));
        size_t L0_j_2_max__ = (k - 1);
        size_t L0_j_1_max__ = (k - 1);
        for (size_t j_2__ = 0; j_2__ < L0_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L0_j_1_max__; ++j_1__) {
                vars__.push_back(L0(j_1__, j_2__));
            }
        }

        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> L1 = in__.cholesky_factor_cov_constrain((k - 1), (k - 1));
        size_t L1_j_2_max__ = (k - 1);
        size_t L1_j_1_max__ = (k - 1);
        for (size_t j_2__ = 0; j_2__ < L1_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L1_j_1_max__; ++j_1__) {
                vars__.push_back(L1(j_1__, j_2__));
            }
        }

        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        if (!include_tparams__ && !include_gqs__) return;

        try {
            // declare and define transformed parameters
            current_statement_begin__ = 53;
            validate_non_negative_index("invsigma0", "(k - 1)", (k - 1));
            validate_non_negative_index("invsigma0", "(k - 1)", (k - 1));
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> invsigma0((k - 1), (k - 1));
            stan::math::initialize(invsigma0, DUMMY_VAR__);
            stan::math::fill(invsigma0, DUMMY_VAR__);

            current_statement_begin__ = 54;
            validate_non_negative_index("invsigma1", "(k - 1)", (k - 1));
            validate_non_negative_index("invsigma1", "(k - 1)", (k - 1));
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> invsigma1((k - 1), (k - 1));
            stan::math::initialize(invsigma1, DUMMY_VAR__);
            stan::math::fill(invsigma1, DUMMY_VAR__);

            current_statement_begin__ = 55;
            validate_non_negative_index("probs", "k", k);
            validate_non_negative_index("probs", "n", n);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > probs(n, Eigen::Matrix<double, Eigen::Dynamic, 1>(k));
            stan::math::initialize(probs, DUMMY_VAR__);
            stan::math::fill(probs, DUMMY_VAR__);

            current_statement_begin__ = 56;
            double invlambda;
            (void) invlambda;  // dummy to suppress unused var warning
            stan::math::initialize(invlambda, DUMMY_VAR__);
            stan::math::fill(invlambda, DUMMY_VAR__);

            current_statement_begin__ = 57;
            double lambda_half;
            (void) lambda_half;  // dummy to suppress unused var warning
            stan::math::initialize(lambda_half, DUMMY_VAR__);
            stan::math::fill(lambda_half, DUMMY_VAR__);

            current_statement_begin__ = 58;
            validate_non_negative_index("lin_pred", "(k - 1)", (k - 1));
            validate_non_negative_index("lin_pred", "n", n);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > lin_pred(n, Eigen::Matrix<double, Eigen::Dynamic, 1>((k - 1)));
            stan::math::initialize(lin_pred, DUMMY_VAR__);
            stan::math::fill(lin_pred, DUMMY_VAR__);

            // do transformed parameters statements
            current_statement_begin__ = 61;
            for (int i = 1; i <= n; ++i) {

                current_statement_begin__ = 62;
                stan::model::assign(lin_pred, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            transpose(add(multiply(get_base1(covars, i, "covars", 1), theta), get_base1(offset, i, "offset", 1))), 
                            "assigning variable lin_pred");
                current_statement_begin__ = 63;
                stan::model::assign(probs, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            softmax(append_row(get_base1(lin_pred_rand, i, "lin_pred_rand", 1), 0)), 
                            "assigning variable probs");
            }
            current_statement_begin__ = 75;
            stan::math::assign(invsigma0, multiply_lower_tri_self_transpose(L0));
            current_statement_begin__ = 76;
            stan::math::assign(invsigma1, multiply_lower_tri_self_transpose(L1));
            current_statement_begin__ = 78;
            stan::math::assign(invlambda, (1 / lambda));
            current_statement_begin__ = 79;
            stan::math::assign(lambda_half, (lambda / 2));

            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            current_statement_begin__ = 53;
            stan::math::check_cov_matrix(function__, "invsigma0", invsigma0);

            current_statement_begin__ = 54;
            stan::math::check_cov_matrix(function__, "invsigma1", invsigma1);

            current_statement_begin__ = 55;
            size_t probs_i_0_max__ = n;
            for (size_t i_0__ = 0; i_0__ < probs_i_0_max__; ++i_0__) {
                stan::math::check_simplex(function__, "probs[i_0__]", probs[i_0__]);
            }

            current_statement_begin__ = 56;
            check_greater_or_equal(function__, "invlambda", invlambda, 0);

            current_statement_begin__ = 57;
            check_greater_or_equal(function__, "lambda_half", lambda_half, 0);

            // write transformed parameters
            if (include_tparams__) {
                size_t invsigma0_j_2_max__ = (k - 1);
                size_t invsigma0_j_1_max__ = (k - 1);
                for (size_t j_2__ = 0; j_2__ < invsigma0_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < invsigma0_j_1_max__; ++j_1__) {
                        vars__.push_back(invsigma0(j_1__, j_2__));
                    }
                }
                size_t invsigma1_j_2_max__ = (k - 1);
                size_t invsigma1_j_1_max__ = (k - 1);
                for (size_t j_2__ = 0; j_2__ < invsigma1_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < invsigma1_j_1_max__; ++j_1__) {
                        vars__.push_back(invsigma1(j_1__, j_2__));
                    }
                }
                size_t probs_j_1_max__ = k;
                size_t probs_k_0_max__ = n;
                for (size_t j_1__ = 0; j_1__ < probs_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < probs_k_0_max__; ++k_0__) {
                        vars__.push_back(probs[k_0__](j_1__));
                    }
                }
                vars__.push_back(invlambda);
                vars__.push_back(lambda_half);
                size_t lin_pred_j_1_max__ = (k - 1);
                size_t lin_pred_k_0_max__ = n;
                for (size_t j_1__ = 0; j_1__ < lin_pred_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < lin_pred_k_0_max__; ++k_0__) {
                        vars__.push_back(lin_pred[k_0__](j_1__));
                    }
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 122;
            validate_non_negative_index("beta", "p", p);
            validate_non_negative_index("beta", "(k - 1)", (k - 1));
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> beta(p, (k - 1));
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);

            current_statement_begin__ = 123;
            validate_non_negative_index("invsigma_diff", "(k - 1)", (k - 1));
            validate_non_negative_index("invsigma_diff", "(k - 1)", (k - 1));
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> invsigma_diff((k - 1), (k - 1));
            stan::math::initialize(invsigma_diff, DUMMY_VAR__);
            stan::math::fill(invsigma_diff, DUMMY_VAR__);

            // generated quantities statements
            current_statement_begin__ = 127;
            stan::math::assign(beta, multiply(R_ast_inverse, theta));
            current_statement_begin__ = 128;
            stan::math::assign(invsigma_diff, subtract(invsigma1, invsigma0));

            // validate, write generated quantities
            current_statement_begin__ = 122;
            size_t beta_j_2_max__ = (k - 1);
            size_t beta_j_1_max__ = p;
            for (size_t j_2__ = 0; j_2__ < beta_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                    vars__.push_back(beta(j_1__, j_2__));
                }
            }

            current_statement_begin__ = 123;
            size_t invsigma_diff_j_2_max__ = (k - 1);
            size_t invsigma_diff_j_1_max__ = (k - 1);
            for (size_t j_2__ = 0; j_2__ < invsigma_diff_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < invsigma_diff_j_1_max__; ++j_1__) {
                    vars__.push_back(invsigma_diff(j_1__, j_2__));
                }
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    std::string model_name() const {
        return "model_mn_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "lambda";
        param_names__.push_back(param_name_stream__.str());
        size_t theta_j_2_max__ = (k - 1);
        size_t theta_j_1_max__ = p;
        for (size_t j_2__ = 0; j_2__ < theta_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t lin_pred_rand_j_1_max__ = (k - 1);
        size_t lin_pred_rand_k_0_max__ = n;
        for (size_t j_1__ = 0; j_1__ < lin_pred_rand_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < lin_pred_rand_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lin_pred_rand" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t L0_j_2_max__ = (k - 1);
        size_t L0_j_1_max__ = (k - 1);
        for (size_t j_2__ = 0; j_2__ < L0_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L0_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "L0" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t L1_j_2_max__ = (k - 1);
        size_t L1_j_1_max__ = (k - 1);
        for (size_t j_2__ = 0; j_2__ < L1_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L1_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "L1" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t invsigma0_j_2_max__ = (k - 1);
            size_t invsigma0_j_1_max__ = (k - 1);
            for (size_t j_2__ = 0; j_2__ < invsigma0_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < invsigma0_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "invsigma0" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t invsigma1_j_2_max__ = (k - 1);
            size_t invsigma1_j_1_max__ = (k - 1);
            for (size_t j_2__ = 0; j_2__ < invsigma1_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < invsigma1_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "invsigma1" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t probs_j_1_max__ = k;
            size_t probs_k_0_max__ = n;
            for (size_t j_1__ = 0; j_1__ < probs_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < probs_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "probs" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "invlambda";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda_half";
            param_names__.push_back(param_name_stream__.str());
            size_t lin_pred_j_1_max__ = (k - 1);
            size_t lin_pred_k_0_max__ = n;
            for (size_t j_1__ = 0; j_1__ < lin_pred_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < lin_pred_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "lin_pred" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }

        if (!include_gqs__) return;
        size_t beta_j_2_max__ = (k - 1);
        size_t beta_j_1_max__ = p;
        for (size_t j_2__ = 0; j_2__ < beta_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t invsigma_diff_j_2_max__ = (k - 1);
        size_t invsigma_diff_j_1_max__ = (k - 1);
        for (size_t j_2__ = 0; j_2__ < invsigma_diff_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < invsigma_diff_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "invsigma_diff" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "lambda";
        param_names__.push_back(param_name_stream__.str());
        size_t theta_j_2_max__ = (k - 1);
        size_t theta_j_1_max__ = p;
        for (size_t j_2__ = 0; j_2__ < theta_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t lin_pred_rand_j_1_max__ = (k - 1);
        size_t lin_pred_rand_k_0_max__ = n;
        for (size_t j_1__ = 0; j_1__ < lin_pred_rand_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < lin_pred_rand_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lin_pred_rand" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t L0_j_1_max__ = ((((k - 1) * ((k - 1) + 1)) / 2) + (((k - 1) - (k - 1)) * (k - 1)));
        for (size_t j_1__ = 0; j_1__ < L0_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "L0" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t L1_j_1_max__ = ((((k - 1) * ((k - 1) + 1)) / 2) + (((k - 1) - (k - 1)) * (k - 1)));
        for (size_t j_1__ = 0; j_1__ < L1_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "L1" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t invsigma0_j_1_max__ = ((k - 1) + (((k - 1) * ((k - 1) - 1)) / 2));
            for (size_t j_1__ = 0; j_1__ < invsigma0_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "invsigma0" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t invsigma1_j_1_max__ = ((k - 1) + (((k - 1) * ((k - 1) - 1)) / 2));
            for (size_t j_1__ = 0; j_1__ < invsigma1_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "invsigma1" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t probs_j_1_max__ = (k - 1);
            size_t probs_k_0_max__ = n;
            for (size_t j_1__ = 0; j_1__ < probs_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < probs_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "probs" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "invlambda";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda_half";
            param_names__.push_back(param_name_stream__.str());
            size_t lin_pred_j_1_max__ = (k - 1);
            size_t lin_pred_k_0_max__ = n;
            for (size_t j_1__ = 0; j_1__ < lin_pred_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < lin_pred_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "lin_pred" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }

        if (!include_gqs__) return;
        size_t beta_j_2_max__ = (k - 1);
        size_t beta_j_1_max__ = p;
        for (size_t j_2__ = 0; j_2__ < beta_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t invsigma_diff_j_2_max__ = (k - 1);
        size_t invsigma_diff_j_1_max__ = (k - 1);
        for (size_t j_2__ = 0; j_2__ < invsigma_diff_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < invsigma_diff_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "invsigma_diff" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }

}; // model

}  // namespace

typedef model_mn_model_namespace::model_mn_model stan_model;

#ifndef USING_R

stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

#endif


#endif
